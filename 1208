二进制位bit：计算机，所有的信息都是bit的形式存在，每个bit有0和1两种状态
字节byte:8个二进制位是一个byte
ASCII ：美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。规定了128个字符的编码，用一个byte来表示，只占用7个bit，最高为0
Unicode ：是一个符号集合，定义了符号的二进制代码，但是没有规定如何存储二进制代码
UTF-8：是Unicode的实现方式之一，使用变长的编码形式，可以用1-4个byte来表示一个符号

Unicode规范定义了，每个文件的最前面分别加入一个表示编码顺序的字符，用FEFF来表示，正好是2个字节。如果文本文件的头2个字节是FEFF，表示用的大头方式(第一个字节在前)，用FFFE的表示用的小头方式(第二个字节在前)

“通用字符集”（Universal Character Set，简称UCS）

Unicode和UCS是来自2个不同的组织，Unicode对集合添加了一些新的规则和规范

从File，从Socket


        // character streams read and write
        Reader reader;
        Writer wiWriter;
        
        // stream of bytes read and write
        InputStream inputStream;
        OutputStream outputStream;


        
        Charset.forName("UTF-8");
       // 
        String s = "这是一段中文字符串";
        byte[] b = s.getBytes("UTF-8");
        String n = new String(b,"UTF-8");
        
        Charset charset = Charset.forName("UTF-8");
        ByteBuffer byteBuffer = charset.encode(s);
        CharBuffer charBuffer = charset.decode(byteBuffer);



https://www.zhihu.com/question/39262026
https://developer.ibm.com/zh/articles/j-lo-chinesecoding/
base64 用来将binary data转换成字符流，更适用于网络传输场景
https://stackoverflow.com/questions/201479/what-is-base-64-encoding-used-for

https://stackoverflow.com/questions/9655181/how-to-convert-a-byte-array-to-a-hex-string-in-java

https://stackoverflow.com/questions/8860383/why-do-we-need-both-ucs-and-unicode-character-sets


D:\7-Zip\7z.exe l D:\work\Java\zip\我的.rar -y -r my.txt

-y 表示yes
-r 表示递归
l 表示列出所有文件
my.txt表示要查找的文件
-o 表示解压的目标

D:\7-Zip\7z.exe e D:\work\Java\zip\Lang.rar zh-cn.txt -y -r -oD:\work\Java\zip


https://www.rarlab.com/rar_add.htm

boolean isFileExsit(String compress,String target) {
    
}

String extractFile(String compress,String target,String desDict) {

}

如果不存在，则直接解压对应的文件；如果不存在，则把所有的压缩文件解压出来，然后再找，直到找到文件为止

如果文件重名，则文件名把路径都加上

如果存在，把目标文件解压到压缩包的同级目录；不存在，创建一个压缩文件同名目录，把所有压缩包放这个路径下

命令执行，处理命令结果

从Excel里面读取文件，压缩包名称，以及apk名称，还有版本号


https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html
https://stackoverflow.com/questions/5574241/why-does-sun-misc-unsafe-exist-and-how-can-it-be-used-in-the-real-world
https://stackoverflow.com/questions/16819234/where-is-sun-misc-unsafe-documented



总共10个字符，其中
第1个代表文件类型
第234位代表所有者的权限，r读 w写 x可执行
第456代表同群组的权限
第789代表非本群组的权限

第一栏代表这个文件的类型与权限(permission)：
这个地方最需要注意了！仔细看的话，你应该可以发现这一栏其实共有十个字符：(图2.1.1及图2.1.2内的权限并无关系)


图2.1.2、文件的类型与权限之内容

第一个字符代表这个文件是『目录、文件或链接文件等等』：

当为[ d ]则是目录，例如上表档名为『.gconf』的那一行；
当为[ - ]则是文件，例如上表档名为『install.log』那一行；
若是[ l ]则表示为连结档(link file)；
若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；
若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。

接下来的字符中，以个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。

第一组为『文件拥者的权限』，以『install.log』那个文件为例， 该文件的拥有者可以读写，但不可执行；
第二组为『同群组的权限』；
第组为『其他非本群组的权限』


