

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinWorkerThread;
import java.util.concurrent.RecursiveTask;
import java.util.concurrent.atomic.AtomicInteger;


public class ForkJoinTest {

    private static AtomicInteger integer = new AtomicInteger();

    public static void main(String[] args) {

        List<BigInteger> list = new ArrayList<>();
        for (int i = 1; i < 10; i++) {
            list.add(new BigInteger(Integer.toString(i)));
        }

        BigInteger sum = ForkJoinPool.commonPool().
                invoke(new FaTask(list));
        System.out.println("Sum of the factorials = " + sum);


    }

    @SuppressWarnings("serial")
    private static class FaTask extends RecursiveTask<BigInteger> {

        private static final int THRESHOLD = 3;

        private List<BigInteger> mList;

        public int index;

        private FaTask(List<BigInteger> list) {
            mList = list;
            index = integer.getAndIncrement();
        }

        @Override
        protected BigInteger compute() {
            BigInteger resultInteger = null;
            System.out.println(Thread.currentThread().getName() + " run " + this.toString());

            if (mList.size() <= THRESHOLD) {
                resultInteger = calc();
            } else {
                int mid = mList.size() / 2;

                FaTask taskLeft = new FaTask(mList.subList(0, mid));
                FaTask taskright = new FaTask(mList.subList(mid, mList.size()));

                System.out.println(Thread.currentThread().getName() + " task = " + index + " split to task " + taskLeft.index + " and task " + taskright.index);

                taskLeft.fork();
                taskright.fork();

                System.out.println(Thread.currentThread().getName() + " task = " + index + " wait for task " + taskLeft.index + " finish ,status " + this.isDone());
                BigInteger sumleft = taskLeft.join();
                System.out.println(Thread.currentThread().getName() + " task = " + index + " wait for task " + taskright.index + " finish  ,status " + this.isDone());
                BigInteger sumright = taskright.join();

                resultInteger = sumleft.add(sumright);
            }

            System.out.println(Thread.currentThread().getName() + " finish task " + index + " ; result = " + resultInteger + ",status " + this.isDone());

            return resultInteger;

        }

        private BigInteger calc() {
            BigInteger sum = BigInteger.ZERO;
            for (BigInteger bigInteger : mList) {
                sum = sum.add(bigInteger);
            }
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return sum;

        }

        @Override
        public String toString() {
            StringBuilder builder = new StringBuilder();
            builder.append("task " + index + " :[");
            for (BigInteger bigInteger : mList) {
                builder.append(bigInteger + ",");
            }
            builder.append("]");
            return builder.toString();

        }
    }

}
