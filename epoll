https://www.classes.cs.uchicago.edu/archive/2017/winter/51081-1/LabFAQ/lab2/fileio.html
http://www.cs.columbia.edu/~jae/4118/L03-file-io.html

https://man7.org/linux/man-pages/man7/epoll.7.html




epoll用来监听多个文件描述符，来确认是否有可以进行IO的文件描述符，有TL和EL 2种方式来处理大量的文件描述符监听
核心概念是epoll实例，从用户空间角度来看，是一个内核数据结构，主要包含2个列表
监听列表：保存要监听的文件描述符列表，通过epool_clt来注册添加到这个列表里面
就绪列表：可以进行IO操作的文件描述符列表，是注册列表的一个子集。就绪列表由kernel动态填充，填充的内容是活动的IO的文件描述符
epoll_create 创建一个epoll实例
epoll_clt  注册到epoll实例上的监听列表里面，
epoll_wait 等待IO事件，当前没有可用事件时会block当前线程，可以理解为从epoll的就绪列表里面获取对象，一个或多个

ET模式：在ET模式下，只有在被监听的文件描述符有变化 的时候才会进行事件分发，正确的使用方式
使用非阻塞的文件描述符
只有当read或write事件返回EAGAIN的时候，才等待事件
LT模式：默认模式，

http://www.cnhalo.net/2016/07/13/linux-epoll/
https://man7.org/linux/man-pages/man2/ioctl.2.html
https://en.wikipedia.org/wiki/Epoll


